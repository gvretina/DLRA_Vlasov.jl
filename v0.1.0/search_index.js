var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = DLRA_Vlasov","category":"page"},{"location":"#DLRA_Vlasov","page":"Home","title":"DLRA_Vlasov","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for DLRA_Vlasov.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [DLRA_Vlasov]","category":"page"},{"location":"#DLRA_Vlasov.A_dot-Tuple{AbstractArray, AbstractArray, AbstractArray, Any, Any}","page":"Home","title":"DLRA_Vlasov.A_dot","text":"A_dot(X,S,V,p,t)\n\nRight-hand side of the Vlasov-Poisson equation, using a low-rank representation.\n\nArguments\n\nX0::AbstractArray: the left basis matrix with orthonormal columns.\nS0::AbstractArray: the coefficient matrix of the initial data.\nV0::AbstractArray: the right basis matrix with orthonormal columns.\np::NamedTuple: the parameters.\nt::AbstractFloat: the time of evaluation.\n\nDescription\n\nThe Vlasov-Poisson equation is given by the following expression,\n\npartial_t f(txv) = -v cdot nabla_x f(txv) + E(f)(x) cdot nabla_v f(txv)\n\nbut now further does a low-rank representation of f, i.e.\n\nf(txv) = _ij=1^r X_i(tx) S_ij(t) V_j(tv)\n\n\n\n\n\n","category":"method"},{"location":"#DLRA_Vlasov.A_dot-Tuple{AbstractArray, Any, Any}","page":"Home","title":"DLRA_Vlasov.A_dot","text":"A_dot(Y,p,t)\n\nRight-hand side of the Vlasov-Poisson equation.\n\nArguments\n\nY0::AbstractArray: the initial data.\np::NamedTuple: the parameters.\nt::AbstractFloat: the time of evaluation.\n\nDescription\n\nThe Vlasov-Poisson equation is given by the following expression, math ∂_t f(t,x,v) = -v ⋅ ∇_x f(t,x,v) + E(x) ⋅ ∇_v f(t,x,v).\n\n\n\n\n\n","category":"method"},{"location":"#DLRA_Vlasov.BUG_step!-Tuple{AbstractArray, AbstractArray, AbstractArray, AbstractArray, AbstractArray, AbstractArray, AbstractArray, AbstractArray, AbstractArray, AbstractArray, AbstractArray, MutableNamedTuples.MutableNamedTuple, Integer, Integer, Bool}","page":"Home","title":"DLRA_Vlasov.BUG_step!","text":"BUG_step!(X0,V0,S0,K0,L0,tmpx,tmpv,c1,c2,d1,d2,p,r,rmax,augment)\n\nPerform a complete step with the rank-adaptive BUG integrator [1] for the Vlasov Poisson equation, and update the basis and coefficient matrices.\n\n\n\n\n\n","category":"method"},{"location":"#DLRA_Vlasov.K_dot!-NTuple{4, Any}","page":"Home","title":"DLRA_Vlasov.K_dot!","text":"K_dot!(K̇,K0,p,t)\n\nRight-hand side of the DLRA K-step for Vlasov-Poisson equation.\n\nArguments\n\nK̇::AbstractArray: the matrix to be mutated.\nK0::AbstractArray: the initial data.\np::NamedTuple: the parameters.\nt::AbstractFloat: the time of evaluation.\n\nDescription\n\nFollowing [2], the differential equation for the K-step is,\n\n    K_j = _l left( - c_jl^1  _x K_l (tx) + c_jl^2  E(K)(tx) K_l(tx) right)\n\n\n\n\n\n","category":"method"},{"location":"#DLRA_Vlasov.L_dot!-NTuple{4, Any}","page":"Home","title":"DLRA_Vlasov.L_dot!","text":"L_dot!(L̇,L0,p,t)\n\nRight-hand side of the DLRA L-step for Vlasov-Poisson equation.\n\nArguments\n\nL̇::AbstractArray: the matrix to be mutated.\nL0::AbstractArray: the initial data.\np::NamedTuple: the parameters.\nt::AbstractFloat: the time of evaluation.\n\nDescription\n\nFollowing [2], the differential equation for the L-step is,     math     L̇_i(t,v) = ∑_k \\left(- (d_{ik}^2⋅ v) L_k(t,v) + d_{ik}^1 ⋅ ∇_v L_k(t,v) \\right).\n\n\n\n\n\n","category":"method"},{"location":"#DLRA_Vlasov.S_dot!-NTuple{4, Any}","page":"Home","title":"DLRA_Vlasov.S_dot!","text":"S_dot!(Ṡ,S0,p,t)\n\nRight-hand side of the DLRA S-step for Vlasov-Poisson equation.\n\nArguments\n\nṠ::AbstractArray: the matrix to be mutated.\nS0::AbstractArray: the initial data.\np::NamedTuple: the parameters.\nt::AbstractFloat: the time of evaluation.\n\nFollowing [2], the differential equation for the S-step is,     math     Ṡ_{ij}(t) = ∑_{k,l} \\left(- c_{jl}^1 d_{ik}^2 + c_{jl}^2 d_{ik}^1 \\right) S_{kl}(t).\n\n\n\n\n\n","category":"method"},{"location":"#DLRA_Vlasov.calc_E!-NTuple{6, Any}","page":"Home","title":"DLRA_Vlasov.calc_E!","text":"calc_E!(E,X0,S0,V0,h,dx)\n\nSolve the Poisson equation for the inrotational electric field.\n\nArguments\n\nE::AbstractArray: the electric field vector to be mutated.\nX0::AbstractArray: the left basis matrix with orthonormal columns.\nS0::AbstractArray: the coefficient matrix of the initial data.\nV0::AbstractArray: the right basis matrix with orthonormal columns.\nh::AbstractFloat: the step-size of the velocity discretization.\ndx::Tuple: a triplet containing a vector to be mutated, a frequency vector, and a pre-planned FFT object.\n\nDescription\n\nThe electric field in the case of the Vlasov-Poisson equation, satisfies the following equations, math ∇ ⋅ {E}(f)(x) &= 1 - ∫_{\\Omega_v} f(t,x,v) \\,\\mathrm{d} v, \\qquad  ∇ \\times {E}(f)(x) = 0.\n\n\n\n\n\n","category":"method"},{"location":"#DLRA_Vlasov.calc_c1!-Tuple{Any, Any, Any}","page":"Home","title":"DLRA_Vlasov.calc_c1!","text":"calc_c1!(c1,v,V0)\n\nCompute the c^1 coefficient matrix for the Vlasov-Poisson equation.\n\nArguments\n\nc1::AbstractArray: the matrix to be mutated.\nv::AbstractArray: the velocity vector.\nV0::AbstractArray: the initial data.\n\nDescription\n\nFollowing [2], the c^1 coefficient matrix is given by, math  c^1_{jl} ≔ ∫_{\\Omega_v} v V_j V_l \\,\\mathrm{d} v.\n\n\n\n\n\n","category":"method"},{"location":"#DLRA_Vlasov.calc_c2!-NTuple{4, Any}","page":"Home","title":"DLRA_Vlasov.calc_c2!","text":"calc_c2!(c1,dv,V0,dvV)\n\nCompute the c^2 coefficient matrix for the Vlasov-Poisson equation.\n\nArguments\n\nc2::AbstractArray: the matrix to be mutated.\ndv::Tuple: a triplet containing a vector to be mutated, a frequency vector, and a pre-planned FFT object.\nV0::AbstractArray: the initial data.\ndvV::AbstractArray: the matrix to be mutated for the spectral computation of the derivative.\n\nDescription\n\nFollowing [2], the c^2 coefficient matrix is given by, math  c^2_{jl} ≔ ∫_{\\Omega_v} V_j (∇_v V_l) \\,\\mathrm{d} v.\n\n\n\n\n\n","category":"method"},{"location":"#DLRA_Vlasov.calc_d1!-Tuple{Any, Any, Any}","page":"Home","title":"DLRA_Vlasov.calc_d1!","text":"calc_d1!(d1,E,X0)\n\nCompute the d^1 coefficient matrix for the Vlasov-Poisson equation.\n\nArguments\n\nd1::AbstractArray: the matrix to be mutated.\nE::AbstractArray: the electric field vector.\nX0::AbstractArray: the initial data.\n\nDescription\n\nFollowing [2], the d^1 coefficient matrix is given by, math d^1_{ik} ≔ ∫_{\\Omega_x} X_i E X_k \\,\\mathrm{d} x.\n\n\n\n\n\n","category":"method"},{"location":"#DLRA_Vlasov.calc_d2!-NTuple{4, Any}","page":"Home","title":"DLRA_Vlasov.calc_d2!","text":"calc_d2!(d2,dx,X0,dxX)\n\nCompute the d^2 coefficient matrix for the Vlasov-Poisson equation.\n\nArguments\n\nd2::AbstractArray: the matrix to be mutated.\ndx::Tuple: a triplet containing a vector to be mutated, a frequency vector, and a pre-planned FFT object.\nX0::AbstractArray: the initial data.\ndxX::AbstractArray: the matrix to be mutated for the spectral computation of the derivative.\nDescription\n\nFollowing [2], the d^2 coefficient matrix is given by, math d_{ik}^2 ≔ ∫_{\\Omega_x} X_i(∇_x X_k) \\,\\mathrm{d} x.\n\n\n\n\n\n","category":"method"},{"location":"#DLRA_Vlasov.get_sol-NTuple{8, Any}","page":"Home","title":"DLRA_Vlasov.get_sol","text":"get_sol(N,r,τ,T,tol,flag,integrator,augment)\n\nCompute and store a solution of a specific initial condition specified by `flag`, given by `integrator` at time `T`, given a discretization by `N` spatially and by `τ` in time.\n\n\n\n\n\n","category":"method"},{"location":"#DLRA_Vlasov.mBUG_step!-Tuple{AbstractArray, AbstractArray, AbstractArray, AbstractArray, AbstractArray, AbstractArray, AbstractArray, AbstractArray, AbstractArray, AbstractArray, AbstractArray, MutableNamedTuples.MutableNamedTuple, Integer, Integer, AbstractArray, Bool}","page":"Home","title":"DLRA_Vlasov.mBUG_step!","text":"mBUG_step!(X0,V0,S0,K0,L0,tmpx,tmpv,c1,c2,d1,d2,p,r,rmax,ic,augment)\n\nPerform a complete step with the rank-adaptive BUG integrator [3] for the Vlasov Poisson equation, and update the basis and coefficient matrices.\n\n\n\n\n\n","category":"method"}]
}
